group 'io.sharedstreets'
version '0.1-SNAPSHOT'


buildscript {
    repositories {  jcenter()
                    mavenCentral()}
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        //classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    } //  Note PF : this plugin does not support resource transformation (needed for akka configuration files
}

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'com.google.protobuf'
apply plugin: 'com.github.johnrengelman.shadow'


import com.github.jengelman.gradle.plugins.shadow.tasks.*


sourceCompatibility = 1.8

repositories {
    maven { url "http://repository.apache.org" }
    jcenter()
    mavenLocal()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

def flinkversion = "1.2.1"
def protobufversion = "3.4.0"

dependencies {

    compile 'org.slf4j:slf4j-api:1.7.5'
    compile files('external/osmosis-osm-binary.jar')
    compile 'com.esri.geometry:esri-geometry-api:1.2.1'
    compile "org.apache.flink:flink-java:${flinkversion}"
    compile "org.apache.flink:flink-clients_2.10:${flinkversion}"
    compile "com.google.protobuf:protobuf-java:${protobufversion}"

    testCompile "junit:junit:4.11"
}

//protobuf {
//    protoc {
//        // The artifact spec for the Protobuf Compiler
//        artifact = "com.google.protobuf:protoc:${protobufversion}"
//    }
//
//    generateProtoTasks {
//        ofSourceSet('main')
//    }
//
//    generatedFilesBaseDir = "$projectDir/src/generated"
//}
//
//clean {
//    delete protobuf.generatedFilesBaseDir
//}

idea {
    module {
//        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java");

        // if you hate browsing Javadoc
        downloadJavadoc = false

        // and love reading sources :)
        downloadSources = true
    }
}

jar {
    manifest { attributes 'Main-Class': 'io.opentraffic.osmlr.builder.ProcessPBF' }
}

// shadow jar, for use inside a flink cluster (does not include the flink stack)
shadowJar {
    dependencies {
        include(dependency('com.esri.geometry:esri-geometry-api'))
        include(dependency(files('external/osmpbf-1.3.3.jar')))
    }
}

// this task generate a jar bundle that include all the flink stack,
// and permit to use the soft from a command line
task allJars(type: ShadowJar) {
    from sourceSets.main.output
    configurations = [project.configurations.compile]
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) { resource = 'reference.conf' }

    manifest {
        attributes 'Implementation-Title': 'osmrl-builder', 'Implementation-Version': version
        attributes 'Main-Class': 'io.opentraffic.osmlr.builder.ProcessPBF'
    }
}
